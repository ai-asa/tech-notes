---
description: 効果的な技術記事の書き方とベストプラクティス
globs: drafts/**/*
alwaysApply: false
---

# 効果的な技術記事の書き方

## 記事の基本構造

### 導入部
- **親しみやすい挨拶**で始める（例：「皆さん、GitHub Actionsは利用していますか？」）
- **著者の自己紹介**を簡潔に行う
- **記事の目的と対象読者**を明確に示す
- 取り上げる技術の**全体像と得られるメリット**を簡潔に説明する

### 本文
- **見出し（#, ##, ###）**を適切に使用して階層構造を作る
- **概念説明→手順→実装例**の流れで説明を進める
- 複雑なプロセスは**図表やフローチャート**で視覚化する
- 手順は**番号付きリスト**で順序立てて説明する
- 関連する技術は**箇条書き**でまとめる
- 重要な情報は**太字**で強調する
- 補足情報は**メッセージブロック（:::message）**で囲む
- 詳細な説明は**折りたたみブロック（:::details）**を活用する

### コード例
- **シンタックスハイライト**付きのコードブロック（```言語名）を使用する
- コードには**適切なコメント**を付ける
- 長いコードは**主要部分に絞る**か、全体構造を示す
- ファイル構成は**ツリー構造**で視覚的に示す

### 表の活用
- 複数項目の比較や関連情報は**表形式**で整理する
- 表のヘッダーと内容を明確に区別する
- 必要に応じて表内で書式（**太字**、改行）を活用する

### おわりに
- 記事の**主要ポイントを要約**する
- 実装による**具体的なメリット**を改めて強調する
- 発展的な**応用例や関連トピック**を簡潔に紹介する
- 読者に**アクションを促す**締めくくりの一文を添える

## 読みやすさを高める工夫

### 視覚的な構造化
- 情報の階層に応じた**見出しレベル**を適切に選択する
- 関連する情報は**グループ化**して提示する
- **空行**を効果的に使って視覚的な区切りを作る
- 長文は**短い段落**に分割する

### 情報の強調
- **太字**で重要なキーワードや概念を強調する
- 警告や注意点は**メッセージブロック**で目立たせる
- 図や表を使って**複雑な情報を視覚化**する

### 専門用語の扱い
- 初出の専門用語は**簡潔な説明**を添える
- 略語は初出時に**フルスペルと意味**を示す
- 前提知識がある場合は記事の冒頭で明示する

## 技術記事特有の要素

### スクリーンショットと図解
- UI操作の説明には**スクリーンショット**を活用する
- システム構成は**図解**で視覚的に示す
- 画像には必要に応じて**キャプション**を付ける

### コード例とサンプル
- **実行可能なコード**を提供する
- コードの各部分の**役割や意図**を説明する
- 必要に応じて**ベストプラクティス**や**アンチパターン**を示す

### 手順説明
- 手順は**明確な順序**で説明する
- 各ステップで**期待される結果**を示す
- 複雑な手順は**サブステップ**に分割する
- コマンド実行例と**期待される出力**を示す

### 環境構築
- 必要な**前提条件**を明確に示す
- **バージョン情報**を明記する
- インストール手順は**プラットフォーム別**に提供する

### トラブルシューティング
- よくある**問題とその解決策**を提供する
- エラーメッセージと**対処方法**を紹介する
- 代替アプローチや**回避策**を示す

## 技術記事を書く際の心構え
- **初学者の視点**を忘れない
- **複雑な概念**をシンプルに説明する
- **実践的な用途**と**具体的なメリット**を示す
- 自分の経験から得た**実践的なアドバイス**を共有する
- **最新情報**に基づいた内容を提供する
- **参考資料やリソース**を適切に提示する 
